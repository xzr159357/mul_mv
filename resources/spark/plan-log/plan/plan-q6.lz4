== Physical Plan ==
TakeOrderedAndProject (50)
+- * Project (49)
   +- * Filter (48)
      +- * HashAggregate (47)
         +- Exchange (46)
            +- * HashAggregate (45)
               +- * Project (44)
                  +- * SortMergeJoin Inner (43)
                     :- * Sort (27)
                     :  +- Exchange (26)
                     :     +- * Project (25)
                     :        +- * BroadcastHashJoin Inner BuildRight (24)
                     :           :- * Project (18)
                     :           :  +- * SortMergeJoin Inner (17)
                     :           :     :- * Sort (11)
                     :           :     :  +- Exchange (10)
                     :           :     :     +- * Project (9)
                     :           :     :        +- * BroadcastHashJoin Inner BuildLeft (8)
                     :           :     :           :- BroadcastExchange (4)
                     :           :     :           :  +- * Filter (3)
                     :           :     :           :     +- * ColumnarToRow (2)
                     :           :     :           :        +- Scan parquet tpcds_1.customer_address (1)
                     :           :     :           +- * Filter (7)
                     :           :     :              +- * ColumnarToRow (6)
                     :           :     :                 +- Scan parquet tpcds_1.customer (5)
                     :           :     +- * Sort (16)
                     :           :        +- Exchange (15)
                     :           :           +- * Filter (14)
                     :           :              +- * ColumnarToRow (13)
                     :           :                 +- Scan parquet tpcds_1.store_sales (12)
                     :           +- BroadcastExchange (23)
                     :              +- * Project (22)
                     :                 +- * Filter (21)
                     :                    +- * ColumnarToRow (20)
                     :                       +- Scan parquet tpcds_1.date_dim (19)
                     +- * Sort (42)
                        +- Exchange (41)
                           +- * Project (40)
                              +- * Filter (39)
                                 +- * BroadcastHashJoin LeftOuter BuildRight (38)
                                    :- * Filter (30)
                                    :  +- * ColumnarToRow (29)
                                    :     +- Scan parquet tpcds_1.item (28)
                                    +- BroadcastExchange (37)
                                       +- * HashAggregate (36)
                                          +- Exchange (35)
                                             +- * HashAggregate (34)
                                                +- * Filter (33)
                                                   +- * ColumnarToRow (32)
                                                      +- Scan parquet tpcds_1.item (31)


(1) Scan parquet tpcds_1.customer_address
Output [2]: [ca_address_sk#6, ca_state#14]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#6, ca_state#14]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#6, ca_state#14]
Condition : isnotnull(ca_address_sk#6)

(4) BroadcastExchange
Input [2]: [ca_address_sk#6, ca_state#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#258]

(5) Scan parquet tpcds_1.customer
Output [2]: [c_customer_sk#19, c_current_addr_sk#23]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(6) ColumnarToRow
Input [2]: [c_customer_sk#19, c_current_addr_sk#23]

(7) Filter
Input [2]: [c_customer_sk#19, c_current_addr_sk#23]
Condition : (isnotnull(c_current_addr_sk#23) AND isnotnull(c_customer_sk#19))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ca_address_sk#6]
Right keys [1]: [c_current_addr_sk#23]
Join condition: None

(9) Project [codegen id : 2]
Output [2]: [ca_state#14, c_customer_sk#19]
Input [4]: [ca_address_sk#6, ca_state#14, c_customer_sk#19, c_current_addr_sk#23]

(10) Exchange
Input [2]: [ca_state#14, c_customer_sk#19]
Arguments: hashpartitioning(c_customer_sk#19, 200), ENSURE_REQUIREMENTS, [id=#266]

(11) Sort [codegen id : 3]
Input [2]: [ca_state#14, c_customer_sk#19]
Arguments: [c_customer_sk#19 ASC NULLS FIRST], false, 0

(12) Scan parquet tpcds_1.store_sales
Output [3]: [ss_sold_date_sk#37, ss_item_sk#39, ss_customer_sk#40]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>

(13) ColumnarToRow [codegen id : 4]
Input [3]: [ss_sold_date_sk#37, ss_item_sk#39, ss_customer_sk#40]

(14) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#37, ss_item_sk#39, ss_customer_sk#40]
Condition : ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#37)) AND isnotnull(ss_item_sk#39))

(15) Exchange
Input [3]: [ss_sold_date_sk#37, ss_item_sk#39, ss_customer_sk#40]
Arguments: hashpartitioning(ss_customer_sk#40, 200), ENSURE_REQUIREMENTS, [id=#275]

(16) Sort [codegen id : 5]
Input [3]: [ss_sold_date_sk#37, ss_item_sk#39, ss_customer_sk#40]
Arguments: [ss_customer_sk#40 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#19]
Right keys [1]: [ss_customer_sk#40]
Join condition: None

(18) Project [codegen id : 7]
Output [3]: [ca_state#14, ss_sold_date_sk#37, ss_item_sk#39]
Input [5]: [ca_state#14, c_customer_sk#19, ss_sold_date_sk#37, ss_item_sk#39, ss_customer_sk#40]

(19) Scan parquet tpcds_1.date_dim
Output [2]: [d_date_sk#60, d_month_seq#63]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [d_date_sk#60, d_month_seq#63]

(21) Filter [codegen id : 6]
Input [2]: [d_date_sk#60, d_month_seq#63]
Condition : ((isnotnull(d_month_seq#63) AND (d_month_seq#63 = Subquery scalar-subquery#0, [id=#143])) AND isnotnull(d_date_sk#60))

(22) Project [codegen id : 6]
Output [1]: [d_date_sk#60]
Input [2]: [d_date_sk#60, d_month_seq#63]

(23) BroadcastExchange
Input [1]: [d_date_sk#60]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#287]

(24) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#37]
Right keys [1]: [d_date_sk#60]
Join condition: None

(25) Project [codegen id : 7]
Output [2]: [ca_state#14, ss_item_sk#39]
Input [4]: [ca_state#14, ss_sold_date_sk#37, ss_item_sk#39, d_date_sk#60]

(26) Exchange
Input [2]: [ca_state#14, ss_item_sk#39]
Arguments: hashpartitioning(ss_item_sk#39, 200), ENSURE_REQUIREMENTS, [id=#292]

(27) Sort [codegen id : 8]
Input [2]: [ca_state#14, ss_item_sk#39]
Arguments: [ss_item_sk#39 ASC NULLS FIRST], false, 0

(28) Scan parquet tpcds_1.item
Output [3]: [i_item_sk#88, i_current_price#93, i_category#100]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(29) ColumnarToRow [codegen id : 11]
Input [3]: [i_item_sk#88, i_current_price#93, i_category#100]

(30) Filter [codegen id : 11]
Input [3]: [i_item_sk#88, i_current_price#93, i_category#100]
Condition : (isnotnull(i_current_price#93) AND isnotnull(i_item_sk#88))

(31) Scan parquet tpcds_1.item
Output [2]: [i_current_price#93, i_category#100]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/item]
PushedFilters: [IsNotNull(i_category)]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(32) ColumnarToRow [codegen id : 9]
Input [2]: [i_current_price#93, i_category#100]

(33) Filter [codegen id : 9]
Input [2]: [i_current_price#93, i_category#100]
Condition : isnotnull(i_category#100)

(34) HashAggregate [codegen id : 9]
Input [2]: [i_current_price#93, i_category#100]
Keys [1]: [i_category#100]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#93))]
Aggregate Attributes [2]: [sum#121, count#122L]
Results [3]: [i_category#100, sum#123, count#124L]

(35) Exchange
Input [3]: [i_category#100, sum#123, count#124L]
Arguments: hashpartitioning(i_category#100, 200), ENSURE_REQUIREMENTS, [id=#305]

(36) HashAggregate [codegen id : 10]
Input [3]: [i_category#100, sum#123, count#124L]
Keys [1]: [i_category#100]
Functions [1]: [avg(UnscaledValue(i_current_price#93))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#93))#110]
Results [2]: [cast((avg(UnscaledValue(i_current_price#93))#110 / 100.0) as decimal(11,6)) AS avg(i_current_price)#111, i_category#100 AS i_category#100#118]

(37) BroadcastExchange
Input [2]: [avg(i_current_price)#111, i_category#100#118]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#309]

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [i_category#100]
Right keys [1]: [i_category#100#118]
Join condition: None

(39) Filter [codegen id : 11]
Input [5]: [i_item_sk#88, i_current_price#93, i_category#100, avg(i_current_price)#111, i_category#100#118]
Condition : (cast(i_current_price#93 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#111)), DecimalType(14,7), true))

(40) Project [codegen id : 11]
Output [1]: [i_item_sk#88]
Input [5]: [i_item_sk#88, i_current_price#93, i_category#100, avg(i_current_price)#111, i_category#100#118]

(41) Exchange
Input [1]: [i_item_sk#88]
Arguments: hashpartitioning(i_item_sk#88, 200), ENSURE_REQUIREMENTS, [id=#315]

(42) Sort [codegen id : 12]
Input [1]: [i_item_sk#88]
Arguments: [i_item_sk#88 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#39]
Right keys [1]: [i_item_sk#88]
Join condition: None

(44) Project [codegen id : 13]
Output [1]: [ca_state#14]
Input [3]: [ca_state#14, ss_item_sk#39, i_item_sk#88]

(45) HashAggregate [codegen id : 13]
Input [1]: [ca_state#14]
Keys [1]: [ca_state#14]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#119L]
Results [2]: [ca_state#14, count#120L]

(46) Exchange
Input [2]: [ca_state#14, count#120L]
Arguments: hashpartitioning(ca_state#14, 200), ENSURE_REQUIREMENTS, [id=#324]

(47) HashAggregate [codegen id : 14]
Input [2]: [ca_state#14, count#120L]
Keys [1]: [ca_state#14]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#4L]
Results [3]: [ca_state#14 AS state#2, count(1)#4L AS cnt#3L, count(1)#4L AS count(1)#113L]

(48) Filter [codegen id : 14]
Input [3]: [state#2, cnt#3L, count(1)#113L]
Condition : (count(1)#113L >= 10)

(49) Project [codegen id : 14]
Output [2]: [state#2, cnt#3L]
Input [3]: [state#2, cnt#3L, count(1)#113L]

(50) TakeOrderedAndProject
Input [2]: [state#2, cnt#3L]
Arguments: 100, [cnt#3L ASC NULLS FIRST], [state#2, cnt#3L]

===== Subqueries =====

Subquery:1 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#0, [id=#143]
* HashAggregate (57)
+- Exchange (56)
   +- * HashAggregate (55)
      +- * Project (54)
         +- * Filter (53)
            +- * ColumnarToRow (52)
               +- Scan parquet tpcds_1.date_dim (51)


(51) Scan parquet tpcds_1.date_dim
Output [3]: [d_month_seq#63, d_year#66, d_moy#68]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(52) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#63, d_year#66, d_moy#68]

(53) Filter [codegen id : 1]
Input [3]: [d_month_seq#63, d_year#66, d_moy#68]
Condition : (((isnotnull(d_year#66) AND isnotnull(d_moy#68)) AND (d_year#66 = 2000)) AND (d_moy#68 = 1))

(54) Project [codegen id : 1]
Output [1]: [d_month_seq#63]
Input [3]: [d_month_seq#63, d_year#66, d_moy#68]

(55) HashAggregate [codegen id : 1]
Input [1]: [d_month_seq#63]
Keys [1]: [d_month_seq#63]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#63]

(56) Exchange
Input [1]: [d_month_seq#63]
Arguments: hashpartitioning(d_month_seq#63, 200), ENSURE_REQUIREMENTS, [id=#139]

(57) HashAggregate [codegen id : 2]
Input [1]: [d_month_seq#63]
Keys [1]: [d_month_seq#63]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#63]


