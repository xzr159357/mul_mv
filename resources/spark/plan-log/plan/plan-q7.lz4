== Physical Plan ==
TakeOrderedAndProject (34)
+- * HashAggregate (33)
   +- Exchange (32)
      +- * HashAggregate (31)
         +- * Project (30)
            +- * BroadcastHashJoin Inner BuildRight (29)
               :- * Project (23)
               :  +- * BroadcastHashJoin Inner BuildRight (22)
               :     :- * Project (17)
               :     :  +- * BroadcastHashJoin Inner BuildRight (16)
               :     :     :- * Project (10)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :     :     :- * Filter (3)
               :     :     :     :  +- * ColumnarToRow (2)
               :     :     :     :     +- Scan parquet tpcds_1.store_sales (1)
               :     :     :     +- BroadcastExchange (8)
               :     :     :        +- * Project (7)
               :     :     :           +- * Filter (6)
               :     :     :              +- * ColumnarToRow (5)
               :     :     :                 +- Scan parquet tpcds_1.customer_demographics (4)
               :     :     +- BroadcastExchange (15)
               :     :        +- * Project (14)
               :     :           +- * Filter (13)
               :     :              +- * ColumnarToRow (12)
               :     :                 +- Scan parquet tpcds_1.date_dim (11)
               :     +- BroadcastExchange (21)
               :        +- * Filter (20)
               :           +- * ColumnarToRow (19)
               :              +- Scan parquet tpcds_1.item (18)
               +- BroadcastExchange (28)
                  +- * Project (27)
                     +- * Filter (26)
                        +- * ColumnarToRow (25)
                           +- Scan parquet tpcds_1.promotion (24)


(1) Scan parquet tpcds_1.store_sales
Output [8]: [ss_sold_date_sk#4, ss_item_sk#6, ss_cdemo_sk#8, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_promo_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_sold_date_sk#4, ss_item_sk#6, ss_cdemo_sk#8, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23]

(3) Filter [codegen id : 5]
Input [8]: [ss_sold_date_sk#4, ss_item_sk#6, ss_cdemo_sk#8, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23]
Condition : (((isnotnull(ss_cdemo_sk#8) AND isnotnull(ss_sold_date_sk#4)) AND isnotnull(ss_item_sk#6)) AND isnotnull(ss_promo_sk#12))

(4) Scan parquet tpcds_1.customer_demographics
Output [4]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_education_status#30]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_marital_status,S), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_education_status#30]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_education_status#30]
Condition : ((((((isnotnull(cd_gender#28) AND isnotnull(cd_marital_status#29)) AND isnotnull(cd_education_status#30)) AND (cd_gender#28 = M)) AND (cd_marital_status#29 = S)) AND (cd_education_status#30 = College             )) AND isnotnull(cd_demo_sk#27))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#27]
Input [4]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_education_status#30]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#149]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#8]
Right keys [1]: [cd_demo_sk#27]
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_sold_date_sk#4, ss_item_sk#6, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23]
Input [9]: [ss_sold_date_sk#4, ss_item_sk#6, ss_cdemo_sk#8, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, cd_demo_sk#27]

(11) Scan parquet tpcds_1.date_dim
Output [2]: [d_date_sk#36, d_year#42]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#36, d_year#42]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#36, d_year#42]
Condition : ((isnotnull(d_year#42) AND (d_year#42 = 2000)) AND isnotnull(d_date_sk#36))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#36]
Input [2]: [d_date_sk#36, d_year#42]

(15) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#158]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join condition: None

(17) Project [codegen id : 5]
Output [6]: [ss_item_sk#6, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23]
Input [8]: [ss_sold_date_sk#4, ss_item_sk#6, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, d_date_sk#36]

(18) Scan parquet tpcds_1.item
Output [2]: [i_item_sk#64, i_item_id#65]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#64, i_item_id#65]

(20) Filter [codegen id : 3]
Input [2]: [i_item_sk#64, i_item_id#65]
Condition : isnotnull(i_item_sk#64)

(21) BroadcastExchange
Input [2]: [i_item_sk#64, i_item_id#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#166]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#64]
Join condition: None

(23) Project [codegen id : 5]
Output [6]: [ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, i_item_id#65]
Input [8]: [ss_item_sk#6, ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, i_item_sk#64, i_item_id#65]

(24) Scan parquet tpcds_1.promotion
Output [3]: [p_promo_sk#86, p_channel_email#95, p_channel_event#100]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/promotion]
PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>

(25) ColumnarToRow [codegen id : 4]
Input [3]: [p_promo_sk#86, p_channel_email#95, p_channel_event#100]

(26) Filter [codegen id : 4]
Input [3]: [p_promo_sk#86, p_channel_email#95, p_channel_event#100]
Condition : (((p_channel_email#95 = N) OR (p_channel_event#100 = N)) AND isnotnull(p_promo_sk#86))

(27) Project [codegen id : 4]
Output [1]: [p_promo_sk#86]
Input [3]: [p_promo_sk#86, p_channel_email#95, p_channel_event#100]

(28) BroadcastExchange
Input [1]: [p_promo_sk#86]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#175]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_promo_sk#12]
Right keys [1]: [p_promo_sk#86]
Join condition: None

(30) Project [codegen id : 5]
Output [5]: [ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, i_item_id#65]
Input [7]: [ss_promo_sk#12, ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, i_item_id#65, p_promo_sk#86]

(31) HashAggregate [codegen id : 5]
Input [5]: [ss_quantity#14, ss_list_price#16, ss_sales_price#17, ss_coupon_amt#23, i_item_id#65]
Keys [1]: [i_item_id#65]
Functions [4]: [partial_avg(cast(ss_quantity#14 as bigint)), partial_avg(UnscaledValue(ss_list_price#16)), partial_avg(UnscaledValue(ss_coupon_amt#23)), partial_avg(UnscaledValue(ss_sales_price#17))]
Aggregate Attributes [8]: [sum#115, count#116L, sum#117, count#118L, sum#119, count#120L, sum#121, count#122L]
Results [9]: [i_item_id#65, sum#123, count#124L, sum#125, count#126L, sum#127, count#128L, sum#129, count#130L]

(32) Exchange
Input [9]: [i_item_id#65, sum#123, count#124L, sum#125, count#126L, sum#127, count#128L, sum#129, count#130L]
Arguments: hashpartitioning(i_item_id#65, 200), ENSURE_REQUIREMENTS, [id=#181]

(33) HashAggregate [codegen id : 6]
Input [9]: [i_item_id#65, sum#123, count#124L, sum#125, count#126L, sum#127, count#128L, sum#129, count#130L]
Keys [1]: [i_item_id#65]
Functions [4]: [avg(cast(ss_quantity#14 as bigint)), avg(UnscaledValue(ss_list_price#16)), avg(UnscaledValue(ss_coupon_amt#23)), avg(UnscaledValue(ss_sales_price#17))]
Aggregate Attributes [4]: [avg(cast(ss_quantity#14 as bigint))#105, avg(UnscaledValue(ss_list_price#16))#106, avg(UnscaledValue(ss_coupon_amt#23))#107, avg(UnscaledValue(ss_sales_price#17))#108]
Results [5]: [i_item_id#65, avg(cast(ss_quantity#14 as bigint))#105 AS agg1#0, cast((avg(UnscaledValue(ss_list_price#16))#106 / 100.0) as decimal(11,6)) AS agg2#1, cast((avg(UnscaledValue(ss_coupon_amt#23))#107 / 100.0) as decimal(11,6)) AS agg3#2, cast((avg(UnscaledValue(ss_sales_price#17))#108 / 100.0) as decimal(11,6)) AS agg4#3]

(34) TakeOrderedAndProject
Input [5]: [i_item_id#65, agg1#0, agg2#1, agg3#2, agg4#3]
Arguments: 100, [i_item_id#65 ASC NULLS FIRST], [i_item_id#65, agg1#0, agg2#1, agg3#2, agg4#3]

