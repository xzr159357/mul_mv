== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- * BroadcastHashJoin Inner BuildRight (44)
      :- * Project (39)
      :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :- * Project (32)
      :     :  +- * SortMergeJoin Inner (31)
      :     :     :- * Sort (16)
      :     :     :  +- Exchange (15)
      :     :     :     +- * Filter (14)
      :     :     :        +- * HashAggregate (13)
      :     :     :           +- Exchange (12)
      :     :     :              +- * HashAggregate (11)
      :     :     :                 +- * Project (10)
      :     :     :                    +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :                       :- * Filter (3)
      :     :     :                       :  +- * ColumnarToRow (2)
      :     :     :                       :     +- Scan parquet tpcds_1.store_returns (1)
      :     :     :                       +- BroadcastExchange (8)
      :     :     :                          +- * Project (7)
      :     :     :                             +- * Filter (6)
      :     :     :                                +- * ColumnarToRow (5)
      :     :     :                                   +- Scan parquet tpcds_1.date_dim (4)
      :     :     +- * Sort (30)
      :     :        +- * Filter (29)
      :     :           +- * HashAggregate (28)
      :     :              +- Exchange (27)
      :     :                 +- * HashAggregate (26)
      :     :                    +- * HashAggregate (25)
      :     :                       +- Exchange (24)
      :     :                          +- * HashAggregate (23)
      :     :                             +- * Project (22)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (21)
      :     :                                   :- * Filter (19)
      :     :                                   :  +- * ColumnarToRow (18)
      :     :                                   :     +- Scan parquet tpcds_1.store_returns (17)
      :     :                                   +- ReusedExchange (20)
      :     +- BroadcastExchange (37)
      :        +- * Project (36)
      :           +- * Filter (35)
      :              +- * ColumnarToRow (34)
      :                 +- Scan parquet tpcds_1.store (33)
      +- BroadcastExchange (43)
         +- * Filter (42)
            +- * ColumnarToRow (41)
               +- Scan parquet tpcds_1.customer (40)


(1) Scan parquet tpcds_1.store_returns
Output [4]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store_returns]
PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]

(3) Filter [codegen id : 2]
Input [4]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Condition : ((isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11)) AND isnotnull(sr_customer_sk#7))

(4) Scan parquet tpcds_1.date_dim
Output [2]: [d_date_sk#24, d_year#30]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#30]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#30]
Condition : ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#30]

(8) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#226]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#24]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Input [5]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15, d_date_sk#24]

(11) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Keys [2]: [sr_customer_sk#7, sr_store_sk#11]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#15))]
Aggregate Attributes [1]: [sum#105L]
Results [3]: [sr_customer_sk#7, sr_store_sk#11, sum#106L]

(12) Exchange
Input [3]: [sr_customer_sk#7, sr_store_sk#11, sum#106L]
Arguments: hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 200), ENSURE_REQUIREMENTS, [id=#232]

(13) HashAggregate [codegen id : 3]
Input [3]: [sr_customer_sk#7, sr_store_sk#11, sum#106L]
Keys [2]: [sr_customer_sk#7, sr_store_sk#11]
Functions [1]: [sum(UnscaledValue(sr_return_amt#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#15))#99L]
Results [3]: [sr_customer_sk#7 AS ctr_customer_sk#1, sr_store_sk#11 AS ctr_store_sk#2, MakeDecimal(sum(UnscaledValue(sr_return_amt#15))#99L,17,2) AS ctr_total_return#3]

(14) Filter [codegen id : 3]
Input [3]: [ctr_customer_sk#1, ctr_store_sk#2, ctr_total_return#3]
Condition : isnotnull(ctr_total_return#3)

(15) Exchange
Input [3]: [ctr_customer_sk#1, ctr_store_sk#2, ctr_total_return#3]
Arguments: hashpartitioning(ctr_store_sk#2, 200), ENSURE_REQUIREMENTS, [id=#237]

(16) Sort [codegen id : 4]
Input [3]: [ctr_customer_sk#1, ctr_store_sk#2, ctr_total_return#3]
Arguments: [ctr_store_sk#2 ASC NULLS FIRST], false, 0

(17) Scan parquet tpcds_1.store_returns
Output [4]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store_returns]
PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(18) ColumnarToRow [codegen id : 6]
Input [4]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]

(19) Filter [codegen id : 6]
Input [4]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Condition : (isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11))

(20) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#24]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#24]
Join condition: None

(22) Project [codegen id : 6]
Output [3]: [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Input [5]: [sr_returned_date_sk#4, sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15, d_date_sk#24]

(23) HashAggregate [codegen id : 6]
Input [3]: [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
Keys [2]: [sr_customer_sk#7, sr_store_sk#11]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#15))]
Aggregate Attributes [1]: [sum#111L]
Results [3]: [sr_customer_sk#7, sr_store_sk#11, sum#112L]

(24) Exchange
Input [3]: [sr_customer_sk#7, sr_store_sk#11, sum#112L]
Arguments: hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 200), ENSURE_REQUIREMENTS, [id=#313]

(25) HashAggregate [codegen id : 7]
Input [3]: [sr_customer_sk#7, sr_store_sk#11, sum#112L]
Keys [2]: [sr_customer_sk#7, sr_store_sk#11]
Functions [1]: [sum(UnscaledValue(sr_return_amt#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#15))#100L]
Results [2]: [sr_store_sk#11 AS ctr_store_sk#2, MakeDecimal(sum(UnscaledValue(sr_return_amt#15))#100L,17,2) AS ctr_total_return#3]

(26) HashAggregate [codegen id : 7]
Input [2]: [ctr_store_sk#2, ctr_total_return#3]
Keys [1]: [ctr_store_sk#2]
Functions [1]: [partial_avg(ctr_total_return#3)]
Aggregate Attributes [2]: [sum#107, count#108L]
Results [3]: [ctr_store_sk#2, sum#109, count#110L]

(27) Exchange
Input [3]: [ctr_store_sk#2, sum#109, count#110L]
Arguments: hashpartitioning(ctr_store_sk#2, 200), ENSURE_REQUIREMENTS, [id=#348]

(28) HashAggregate [codegen id : 8]
Input [3]: [ctr_store_sk#2, sum#109, count#110L]
Keys [1]: [ctr_store_sk#2]
Functions [1]: [avg(ctr_total_return#3)]
Aggregate Attributes [1]: [avg(ctr_total_return#3)#101]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#3)#101) * 1.200000), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#102, ctr_store_sk#2 AS ctr_store_sk#2#104]

(29) Filter [codegen id : 8]
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#102, ctr_store_sk#2#104]
Condition : isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#102)

(30) Sort [codegen id : 8]
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#102, ctr_store_sk#2#104]
Arguments: [ctr_store_sk#2#104 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 11]
Left keys [1]: [ctr_store_sk#2]
Right keys [1]: [ctr_store_sk#2#104]
Join condition: (cast(ctr_total_return#3 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#102)

(32) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#1, ctr_store_sk#2]
Input [5]: [ctr_customer_sk#1, ctr_store_sk#2, ctr_total_return#3, (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#102, ctr_store_sk#2#104]

(33) Scan parquet tpcds_1.store
Output [2]: [s_store_sk#52, s_state#76]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(34) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#52, s_state#76]

(35) Filter [codegen id : 9]
Input [2]: [s_store_sk#52, s_state#76]
Condition : ((isnotnull(s_state#76) AND (s_state#76 = TN)) AND isnotnull(s_store_sk#52))

(36) Project [codegen id : 9]
Output [1]: [s_store_sk#52]
Input [2]: [s_store_sk#52, s_state#76]

(37) BroadcastExchange
Input [1]: [s_store_sk#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#275]

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_store_sk#2]
Right keys [1]: [s_store_sk#52]
Join condition: None

(39) Project [codegen id : 11]
Output [1]: [ctr_customer_sk#1]
Input [3]: [ctr_customer_sk#1, ctr_store_sk#2, s_store_sk#52]

(40) Scan parquet tpcds_1.customer
Output [2]: [c_customer_sk#81, c_customer_id#82]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(41) ColumnarToRow [codegen id : 10]
Input [2]: [c_customer_sk#81, c_customer_id#82]

(42) Filter [codegen id : 10]
Input [2]: [c_customer_sk#81, c_customer_id#82]
Condition : isnotnull(c_customer_sk#81)

(43) BroadcastExchange
Input [2]: [c_customer_sk#81, c_customer_id#82]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#283]

(44) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#1]
Right keys [1]: [c_customer_sk#81]
Join condition: None

(45) Project [codegen id : 11]
Output [1]: [c_customer_id#82]
Input [3]: [ctr_customer_sk#1, c_customer_sk#81, c_customer_id#82]

(46) TakeOrderedAndProject
Input [1]: [c_customer_id#82]
Arguments: 100, [c_customer_id#82 ASC NULLS FIRST], [c_customer_id#82]

