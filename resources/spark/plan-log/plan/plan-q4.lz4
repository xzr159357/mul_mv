== Physical Plan ==
TakeOrderedAndProject (108)
+- * Project (107)
   +- * SortMergeJoin Inner (106)
      :- * Project (91)
      :  +- * SortMergeJoin Inner (90)
      :     :- * Project (73)
      :     :  +- * SortMergeJoin Inner (72)
      :     :     :- * Project (57)
      :     :     :  +- * SortMergeJoin Inner (56)
      :     :     :     :- * SortMergeJoin Inner (39)
      :     :     :     :  :- * Sort (21)
      :     :     :     :  :  +- Exchange (20)
      :     :     :     :  :     +- * Filter (19)
      :     :     :     :  :        +- * HashAggregate (18)
      :     :     :     :  :           +- Exchange (17)
      :     :     :     :  :              +- * HashAggregate (16)
      :     :     :     :  :                 +- * Project (15)
      :     :     :     :  :                    +- * BroadcastHashJoin Inner BuildRight (14)
      :     :     :     :  :                       :- * Project (9)
      :     :     :     :  :                       :  +- * BroadcastHashJoin Inner BuildLeft (8)
      :     :     :     :  :                       :     :- BroadcastExchange (4)
      :     :     :     :  :                       :     :  +- * Filter (3)
      :     :     :     :  :                       :     :     +- * ColumnarToRow (2)
      :     :     :     :  :                       :     :        +- Scan parquet tpcds_1.customer (1)
      :     :     :     :  :                       :     +- * Filter (7)
      :     :     :     :  :                       :        +- * ColumnarToRow (6)
      :     :     :     :  :                       :           +- Scan parquet tpcds_1.store_sales (5)
      :     :     :     :  :                       +- BroadcastExchange (13)
      :     :     :     :  :                          +- * Filter (12)
      :     :     :     :  :                             +- * ColumnarToRow (11)
      :     :     :     :  :                                +- Scan parquet tpcds_1.date_dim (10)
      :     :     :     :  +- * Sort (38)
      :     :     :     :     +- Exchange (37)
      :     :     :     :        +- * HashAggregate (36)
      :     :     :     :           +- Exchange (35)
      :     :     :     :              +- * HashAggregate (34)
      :     :     :     :                 +- * Project (33)
      :     :     :     :                    +- * BroadcastHashJoin Inner BuildRight (32)
      :     :     :     :                       :- * Project (27)
      :     :     :     :                       :  +- * BroadcastHashJoin Inner BuildLeft (26)
      :     :     :     :                       :     :- ReusedExchange (22)
      :     :     :     :                       :     +- * Filter (25)
      :     :     :     :                       :        +- * ColumnarToRow (24)
      :     :     :     :                       :           +- Scan parquet tpcds_1.store_sales (23)
      :     :     :     :                       +- BroadcastExchange (31)
      :     :     :     :                          +- * Filter (30)
      :     :     :     :                             +- * ColumnarToRow (29)
      :     :     :     :                                +- Scan parquet tpcds_1.date_dim (28)
      :     :     :     +- * Sort (55)
      :     :     :        +- Exchange (54)
      :     :     :           +- * Project (53)
      :     :     :              +- * Filter (52)
      :     :     :                 +- * HashAggregate (51)
      :     :     :                    +- Exchange (50)
      :     :     :                       +- * HashAggregate (49)
      :     :     :                          +- * Project (48)
      :     :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
      :     :     :                                :- * Project (45)
      :     :     :                                :  +- * BroadcastHashJoin Inner BuildLeft (44)
      :     :     :                                :     :- ReusedExchange (40)
      :     :     :                                :     +- * Filter (43)
      :     :     :                                :        +- * ColumnarToRow (42)
      :     :     :                                :           +- Scan parquet tpcds_1.catalog_sales (41)
      :     :     :                                +- ReusedExchange (46)
      :     :     +- * Sort (71)
      :     :        +- Exchange (70)
      :     :           +- * HashAggregate (69)
      :     :              +- Exchange (68)
      :     :                 +- * HashAggregate (67)
      :     :                    +- * Project (66)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (65)
      :     :                          :- * Project (63)
      :     :                          :  +- * BroadcastHashJoin Inner BuildLeft (62)
      :     :                          :     :- ReusedExchange (58)
      :     :                          :     +- * Filter (61)
      :     :                          :        +- * ColumnarToRow (60)
      :     :                          :           +- Scan parquet tpcds_1.catalog_sales (59)
      :     :                          +- ReusedExchange (64)
      :     +- * Sort (89)
      :        +- Exchange (88)
      :           +- * Project (87)
      :              +- * Filter (86)
      :                 +- * HashAggregate (85)
      :                    +- Exchange (84)
      :                       +- * HashAggregate (83)
      :                          +- * Project (82)
      :                             +- * BroadcastHashJoin Inner BuildRight (81)
      :                                :- * Project (79)
      :                                :  +- * BroadcastHashJoin Inner BuildLeft (78)
      :                                :     :- ReusedExchange (74)
      :                                :     +- * Filter (77)
      :                                :        +- * ColumnarToRow (76)
      :                                :           +- Scan parquet tpcds_1.web_sales (75)
      :                                +- ReusedExchange (80)
      +- * Sort (105)
         +- Exchange (104)
            +- * HashAggregate (103)
               +- Exchange (102)
                  +- * HashAggregate (101)
                     +- * Project (100)
                        +- * BroadcastHashJoin Inner BuildRight (99)
                           :- * Project (97)
                           :  +- * BroadcastHashJoin Inner BuildLeft (96)
                           :     :- ReusedExchange (92)
                           :     +- * Filter (95)
                           :        +- * ColumnarToRow (94)
                           :           +- Scan parquet tpcds_1.web_sales (93)
                           +- ReusedExchange (98)


(1) Scan parquet tpcds_1.customer
Output [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]

(3) Filter [codegen id : 1]
Input [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]
Condition : (isnotnull(c_customer_sk#30) AND isnotnull(c_customer_id#31))

(4) BroadcastExchange
Input [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#615]

(5) Scan parquet tpcds_1.store_sales
Output [6]: [ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(6) ColumnarToRow
Input [6]: [ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]

(7) Filter
Input [6]: [ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]
Condition : (isnotnull(ss_customer_sk#51) AND isnotnull(ss_sold_date_sk#48))

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [ss_customer_sk#51]
Join condition: None

(9) Project [codegen id : 3]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_sold_date_sk#48, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]
Input [14]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]

(10) Scan parquet tpcds_1.date_dim
Output [2]: [d_date_sk#71, d_year#77]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#71, d_year#77]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#71, d_year#77]
Condition : ((isnotnull(d_year#77) AND (d_year#77 = 2001)) AND isnotnull(d_date_sk#71))

(13) BroadcastExchange
Input [2]: [d_date_sk#71, d_year#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#626]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#48]
Right keys [1]: [d_date_sk#71]
Join condition: None

(15) Project [codegen id : 3]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, d_year#77]
Input [14]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_sold_date_sk#48, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, d_date_sk#71, d_year#77]

(16) HashAggregate [codegen id : 3]
Input [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, d_year#77]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#242, isEmpty#243]
Results [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#244, isEmpty#245]

(17) Exchange
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#244, isEmpty#245]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, 200), ENSURE_REQUIREMENTS, [id=#632]

(18) HashAggregate [codegen id : 4]
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#244, isEmpty#245]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#167]
Results [2]: [c_customer_id#31 AS customer_id#0, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#167 AS year_total#8]

(19) Filter [codegen id : 4]
Input [2]: [customer_id#0, year_total#8]
Condition : (isnotnull(year_total#8) AND (year_total#8 > 0.000000))

(20) Exchange
Input [2]: [customer_id#0, year_total#8]
Arguments: hashpartitioning(customer_id#0, 200), ENSURE_REQUIREMENTS, [id=#637]

(21) Sort [codegen id : 5]
Input [2]: [customer_id#0, year_total#8]
Arguments: [customer_id#0 ASC NULLS FIRST], false, 0

(22) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]

(23) Scan parquet tpcds_1.store_sales
Output [6]: [ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(24) ColumnarToRow
Input [6]: [ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]

(25) Filter
Input [6]: [ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]
Condition : (isnotnull(ss_customer_sk#51) AND isnotnull(ss_sold_date_sk#48))

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [ss_customer_sk#51]
Join condition: None

(27) Project [codegen id : 8]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_sold_date_sk#48, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]
Input [14]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_sold_date_sk#48, ss_customer_sk#51, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65]

(28) Scan parquet tpcds_1.date_dim
Output [2]: [d_date_sk#71, d_year#77]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#71, d_year#77]

(30) Filter [codegen id : 7]
Input [2]: [d_date_sk#71, d_year#77]
Condition : ((isnotnull(d_year#77) AND (d_year#77 = 2002)) AND isnotnull(d_date_sk#71))

(31) BroadcastExchange
Input [2]: [d_date_sk#71, d_year#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#657]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#48]
Right keys [1]: [d_date_sk#71]
Join condition: None

(33) Project [codegen id : 8]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, d_year#77]
Input [14]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_sold_date_sk#48, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, d_date_sk#71, d_year#77]

(34) HashAggregate [codegen id : 8]
Input [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, d_year#77]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#246, isEmpty#247]
Results [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#248, isEmpty#249]

(35) Exchange
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#248, isEmpty#249]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, 200), ENSURE_REQUIREMENTS, [id=#851]

(36) HashAggregate [codegen id : 9]
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#248, isEmpty#249]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#170]
Results [8]: [c_customer_id#31 AS customer_id#185, c_first_name#38 AS customer_first_name#186, c_last_name#39 AS customer_last_name#187, c_preferred_cust_flag#40 AS customer_preferred_cust_flag#188, c_birth_country#44 AS customer_birth_country#189, c_login#45 AS customer_login#190, c_email_address#46 AS customer_email_address#191, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#170 AS year_total#193]

(37) Exchange
Input [8]: [customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#193]
Arguments: hashpartitioning(customer_id#185, 200), ENSURE_REQUIREMENTS, [id=#895]

(38) Sort [codegen id : 10]
Input [8]: [customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#193]
Arguments: [customer_id#185 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 11]
Left keys [1]: [customer_id#0]
Right keys [1]: [customer_id#185]
Join condition: None

(40) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]

(41) Scan parquet tpcds_1.catalog_sales
Output [6]: [cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(42) ColumnarToRow
Input [6]: [cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]

(43) Filter
Input [6]: [cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]
Condition : (isnotnull(cs_bill_customer_sk#102) AND isnotnull(cs_sold_date_sk#99))

(44) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [cs_bill_customer_sk#102]
Join condition: None

(45) Project [codegen id : 14]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_sold_date_sk#99, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]
Input [14]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]

(46) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#71, d_year#77]

(47) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#99]
Right keys [1]: [d_date_sk#71]
Join condition: None

(48) Project [codegen id : 14]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124, d_year#77]
Input [14]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_sold_date_sk#99, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124, d_date_sk#71, d_year#77]

(49) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124, d_year#77]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#250, isEmpty#251]
Results [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#252, isEmpty#253]

(50) Exchange
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#252, isEmpty#253]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, 200), ENSURE_REQUIREMENTS, [id=#927]

(51) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#252, isEmpty#253]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#174]
Results [2]: [c_customer_id#31 AS customer_id#10, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#174 AS year_total#18]

(52) Filter [codegen id : 15]
Input [2]: [customer_id#10, year_total#18]
Condition : (isnotnull(year_total#18) AND (year_total#18 > 0.000000))

(53) Project [codegen id : 15]
Output [2]: [customer_id#10 AS customer_id#195, year_total#18 AS year_total#203]
Input [2]: [customer_id#10, year_total#18]

(54) Exchange
Input [2]: [customer_id#195, year_total#203]
Arguments: hashpartitioning(customer_id#195, 200), ENSURE_REQUIREMENTS, [id=#953]

(55) Sort [codegen id : 16]
Input [2]: [customer_id#195, year_total#203]
Arguments: [customer_id#195 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#0]
Right keys [1]: [customer_id#195]
Join condition: None

(57) Project [codegen id : 17]
Output [11]: [customer_id#0, year_total#8, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#193, year_total#203]
Input [12]: [customer_id#0, year_total#8, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#193, customer_id#195, year_total#203]

(58) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]

(59) Scan parquet tpcds_1.catalog_sales
Output [6]: [cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(60) ColumnarToRow
Input [6]: [cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]

(61) Filter
Input [6]: [cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]
Condition : (isnotnull(cs_bill_customer_sk#102) AND isnotnull(cs_sold_date_sk#99))

(62) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [cs_bill_customer_sk#102]
Join condition: None

(63) Project [codegen id : 20]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_sold_date_sk#99, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]
Input [14]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_sold_date_sk#99, cs_bill_customer_sk#102, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124]

(64) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#71, d_year#77]

(65) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [cs_sold_date_sk#99]
Right keys [1]: [d_date_sk#71]
Join condition: None

(66) Project [codegen id : 20]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124, d_year#77]
Input [14]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_sold_date_sk#99, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124, d_date_sk#71, d_year#77]

(67) HashAggregate [codegen id : 20]
Input [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, cs_ext_discount_amt#121, cs_ext_sales_price#122, cs_ext_wholesale_cost#123, cs_ext_list_price#124, d_year#77]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#254, isEmpty#255]
Results [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#256, isEmpty#257]

(68) Exchange
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#256, isEmpty#257]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, 200), ENSURE_REQUIREMENTS, [id=#986]

(69) HashAggregate [codegen id : 21]
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#256, isEmpty#257]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#177]
Results [2]: [c_customer_id#31 AS customer_id#205, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#124 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#123 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#121 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#122 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#177 AS year_total#213]

(70) Exchange
Input [2]: [customer_id#205, year_total#213]
Arguments: hashpartitioning(customer_id#205, 200), ENSURE_REQUIREMENTS, [id=#1010]

(71) Sort [codegen id : 22]
Input [2]: [customer_id#205, year_total#213]
Arguments: [customer_id#205 ASC NULLS FIRST], false, 0

(72) SortMergeJoin [codegen id : 23]
Left keys [1]: [customer_id#0]
Right keys [1]: [customer_id#205]
Join condition: (CASE WHEN (year_total#203 > 0.000000) THEN CheckOverflow((promote_precision(year_total#213) / promote_precision(year_total#203)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#8 > 0.000000) THEN CheckOverflow((promote_precision(year_total#193) / promote_precision(year_total#8)), DecimalType(38,14), true) ELSE null END)

(73) Project [codegen id : 23]
Output [10]: [customer_id#0, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#203, year_total#213]
Input [13]: [customer_id#0, year_total#8, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#193, year_total#203, customer_id#205, year_total#213]

(74) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]

(75) Scan parquet tpcds_1.web_sales
Output [6]: [ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(76) ColumnarToRow
Input [6]: [ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]

(77) Filter
Input [6]: [ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]
Condition : (isnotnull(ws_bill_customer_sk#137) AND isnotnull(ws_sold_date_sk#133))

(78) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [ws_bill_customer_sk#137]
Join condition: None

(79) Project [codegen id : 26]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_sold_date_sk#133, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]
Input [14]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]

(80) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#71, d_year#77]

(81) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [ws_sold_date_sk#133]
Right keys [1]: [d_date_sk#71]
Join condition: None

(82) Project [codegen id : 26]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158, d_year#77]
Input [14]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_sold_date_sk#133, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158, d_date_sk#71, d_year#77]

(83) HashAggregate [codegen id : 26]
Input [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158, d_year#77]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#258, isEmpty#259]
Results [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#260, isEmpty#261]

(84) Exchange
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#260, isEmpty#261]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, 200), ENSURE_REQUIREMENTS, [id=#1059]

(85) HashAggregate [codegen id : 27]
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#260, isEmpty#261]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#181]
Results [2]: [c_customer_id#31 AS customer_id#20, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#181 AS year_total#28]

(86) Filter [codegen id : 27]
Input [2]: [customer_id#20, year_total#28]
Condition : (isnotnull(year_total#28) AND (year_total#28 > 0.000000))

(87) Project [codegen id : 27]
Output [2]: [customer_id#20 AS customer_id#215, year_total#28 AS year_total#223]
Input [2]: [customer_id#20, year_total#28]

(88) Exchange
Input [2]: [customer_id#215, year_total#223]
Arguments: hashpartitioning(customer_id#215, 200), ENSURE_REQUIREMENTS, [id=#1085]

(89) Sort [codegen id : 28]
Input [2]: [customer_id#215, year_total#223]
Arguments: [customer_id#215 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 29]
Left keys [1]: [customer_id#0]
Right keys [1]: [customer_id#215]
Join condition: None

(91) Project [codegen id : 29]
Output [11]: [customer_id#0, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#203, year_total#213, year_total#223]
Input [12]: [customer_id#0, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#203, year_total#213, customer_id#215, year_total#223]

(92) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46]

(93) Scan parquet tpcds_1.web_sales
Output [6]: [ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]
Batched: true
Location: InMemoryFileIndex [file:/home/daily/spark_tune/environment/spark-3.1.1/benchmarks/tpcds/data/1/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(94) ColumnarToRow
Input [6]: [ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]

(95) Filter
Input [6]: [ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]
Condition : (isnotnull(ws_bill_customer_sk#137) AND isnotnull(ws_sold_date_sk#133))

(96) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [ws_bill_customer_sk#137]
Join condition: None

(97) Project [codegen id : 32]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_sold_date_sk#133, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]
Input [14]: [c_customer_sk#30, c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_sold_date_sk#133, ws_bill_customer_sk#137, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158]

(98) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#71, d_year#77]

(99) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#133]
Right keys [1]: [d_date_sk#71]
Join condition: None

(100) Project [codegen id : 32]
Output [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158, d_year#77]
Input [14]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_sold_date_sk#133, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158, d_date_sk#71, d_year#77]

(101) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, ws_ext_discount_amt#155, ws_ext_sales_price#156, ws_ext_wholesale_cost#157, ws_ext_list_price#158, d_year#77]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#262, isEmpty#263]
Results [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#264, isEmpty#265]

(102) Exchange
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#264, isEmpty#265]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, 200), ENSURE_REQUIREMENTS, [id=#1128]

(103) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77, sum#264, isEmpty#265]
Keys [8]: [c_customer_id#31, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_country#44, c_login#45, c_email_address#46, d_year#77]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#184]
Results [2]: [c_customer_id#31 AS customer_id#225, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#158 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#157 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#155 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#156 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#184 AS year_total#233]

(104) Exchange
Input [2]: [customer_id#225, year_total#233]
Arguments: hashpartitioning(customer_id#225, 200), ENSURE_REQUIREMENTS, [id=#1152]

(105) Sort [codegen id : 34]
Input [2]: [customer_id#225, year_total#233]
Arguments: [customer_id#225 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#0]
Right keys [1]: [customer_id#225]
Join condition: (CASE WHEN (year_total#203 > 0.000000) THEN CheckOverflow((promote_precision(year_total#213) / promote_precision(year_total#203)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#223 > 0.000000) THEN CheckOverflow((promote_precision(year_total#233) / promote_precision(year_total#223)), DecimalType(38,14), true) ELSE null END)

(107) Project [codegen id : 35]
Output [7]: [customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191]
Input [13]: [customer_id#0, customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191, year_total#203, year_total#213, year_total#223, customer_id#225, year_total#233]

(108) TakeOrderedAndProject
Input [7]: [customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191]
Arguments: 100, [customer_id#185 ASC NULLS FIRST, customer_first_name#186 ASC NULLS FIRST, customer_last_name#187 ASC NULLS FIRST, customer_preferred_cust_flag#188 ASC NULLS FIRST, customer_birth_country#189 ASC NULLS FIRST, customer_login#190 ASC NULLS FIRST, customer_email_address#191 ASC NULLS FIRST], [customer_id#185, customer_first_name#186, customer_last_name#187, customer_preferred_cust_flag#188, customer_birth_country#189, customer_login#190, customer_email_address#191]

